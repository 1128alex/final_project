<?xml version="1.0" encoding="UTF-8"?>
<!-- mapper -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.univ.course.dao.CourseDAO">
	<select id="selectCourseList"
		resultType="com.univ.course.model.Course">
		SELECT
		`courseCode`,
		`courseName`,
		`description`,
		`price`,
		`createdAt`,
		`updatedAt`
		FROM
		`course`
		ORDER BY
		`courseCode`
		ASC
	</select>

	<select id="selectCourseListBySubjectCode"
		parameterType="string" resultType="com.univ.course.model.Course">
		SELECT
		`courseCode`,
		`courseName`,
		`description`,
		`price`,
		`createdAt`,
		`updatedAt`
		FROM
		`course`
		WHERE
		<if test='subjectCode != "0"'>
			`courseCode` LIKE
			CONCAT(#{subjectCode},'%')
		</if>
		ORDER BY
		`courseCode`
		ASC
	</select>

	<select id="selectFilteredCourseList" parameterType="map"
		resultType="com.univ.course.model.ClassCourseCombined">
		<!-- select `courseCode`, `courseName`, `description`, `price`, `createdAt`, 
			`updatedAt`, `rownum` from ( select `courseCode`, `courseName`, `description`, 
			`price`, `createdAt`, `updatedAt`, @ROWNUM := @ROWNUM + 1 as `rownum` from 
			`course`, (select @ROWNUM :=0) as a WHERE (`courseCode` LIKE CONCAT('%',#{searchKeyword},'%') 
			OR `courseName` LIKE CONCAT('%',#{searchKeyword},'%')) <choose> <when test="courseName 
			!= null">AND `courseCode` = #{courseName} </when> <when test="courseLevel 
			!= null">AND `courseCode` LIKE CONCAT(#{subjectCode},#{courseLevel},'%') 
			</when> <when test="courseLevel == null and subjectCode != null">AND `courseCode` 
			LIKE CONCAT(#{subjectCode},'%') </when> </choose> ORDER BY `courseCode` ) 
			as tmp where #{pageNum} * 10 > tmp.rownum and tmp.rownum > #{pageNum} * 10 
			- 10; -->


		<!-- SELECT `courseCode`, `courseName`, `description`, `price`, `createdAt`, 
			`updatedAt` FROM `course` WHERE ( `courseCode` LIKE CONCAT('%',#{searchKeyword},'%') 
			OR `courseName` LIKE CONCAT('%',#{searchKeyword},'%')) <choose> <when test="courseName 
			!= null">AND `courseCode` = #{courseName}</when> <when test="courseLevel 
			!= null">AND `courseCode` LIKE CONCAT(#{subjectCode},#{courseLevel},'%') 
			</when> <when test="courseLevel == null and subjectCode != null">AND `courseCode` 
			LIKE CONCAT(#{subjectCode},'%') </when> </choose> ORDER BY `courseCode` -->

		SELECT * FROM
		(SELECT
		d.*,
		@ROWNUM := @ROWNUM + 1 AS
		`rownum`
		FROM
		(
		SELECT
		a.`id`,
		a.`profEmail`,
		a.`maxNum`,
		a.`registerDueDate`,
		a.`monStartTime`,
		a.`tueStartTime`,
		a.`wedStartTime`,
		a.`thuStartTime`,
		a.`friStartTime`,
		a.`createdAt`,
		a.`updatedAt`,
		b.`courseCode`,
		b.`courseName`,
		b.`description`,
		b.`price`,
		c.`email`,
		c.`firstName`,
		c.`lastName`,
		c.`gender`,
		c.`subject`
		FROM
		`class` as a
		LEFT
		JOIN
		`course`
		as
		b
		ON
		a.`courseCode` =
		b.`courseCode`
		LEFT JOIN
		`user` as c
		ON
		a.`profEmail` =
		c.`email`
		WHERE
		(b.`courseCode`
		LIKE
		CONCAT('%',#{searchKeyword},'%')
		OR
		b.`courseName`
		LIKE
		CONCAT('%',#{searchKeyword},'%'))
		<choose>
			<when test="courseName != null">AND b.`courseCode` = #{courseName}</when>
			<when test="courseLevel != null">AND b.`courseCode` LIKE
				CONCAT(#{subjectCode},#{courseLevel},'%')</when>
			<when test="courseLevel == null and subjectCode != null">AND b.`courseCode` LIKE CONCAT(#{subjectCode},'%')
			</when>
		</choose>
		ORDER BY b.`courseCode`,a.`id`) AS d, (SELECT
		@ROWNUM:=0) AS e) f
		WHERE
		`rownum` BETWEEN #{pageNum} * 5 - 4 AND #{pageNum} * 5;
	</select>

	<select id="selectCourseByCourseCode" parameterType="string"
		resultType="com.univ.course.model.Course">
		SELECT
		`courseCode`,
		`courseName`,
		`description`,
		`price`,
		`createdAt`,
		`updatedAt`
		FROM
		`course`
		WHERE
		`courseCode` = #{courseCode}
	</select>

	<select id="selectDuplicated" parameterType="map"
		resultType="int">
		SELECT
		COUNT(*)
		FROM
		`class`
		WHERE
		`courseCode` = #{courseCode}
		AND
		`profEmail` =
		#{profEmail}
		LIMIT 1;
	</select>

	<insert id="insertClass"
		parameterType="com.univ.course.model.Class">
		INSERT INTO`class`
		(
		`courseCode`,
		`profEmail`,
		`maxNum`,
		`registerDueDate`,
		`monStartTime`,
		`tueStartTime`,
		`wedStartTime`,
		`thuStartTime`,
		`friStartTime`,
		`createdAt`,
		`updatedAt`
		)
		VALUES
		(
		#{courseCode}
		,#{profEmail}
		,#{maxNum}
		,#{registerDueDate}
		,#{monStartTime}
		,#{tueStartTime}
		,#{wedStartTime}
		,#{thuStartTime}
		,#{friStartTime}
		,NOW()
		,NOW()
		)
	</insert>

	<update id="updateClass"
		parameterType="com.univ.course.model.Class">
		UPDATE `class`
		SET
		`courseCode` = #{courseCode},
		`maxNum` = #{maxNum},
		<if test="registerDueDate != null">
			`registerDueDate` = #{registerDueDate},
		</if>
		<if test="monStartTime != null">
			`monStartTime` = #{monStartTime},
		</if>
		<if test="tueStartTime != null">
			`tueStartTime` = #{tueStartTime},
		</if>
		<if test="wedStartTime != null">
			`wedStartTime` = #{wedStartTime},
		</if>
		<if test="thuStartTime != null">
			`thuStartTime` = #{thuStartTime},
		</if>
		<if test="friStartTime != null">
			`friStartTime` = #{friStartTime},
		</if>
		`updatedAt` = NOW()
		WHERE
		`id` = #{id} AND
		`profEmail` =
		#{profEmail};
	</update>

	<select id="selectClassList"
		resultType="com.univ.course.model.Class">
		SELECT
		`id`,
		`courseCode`,
		`profEmail`,
		`maxNum`,
		`registerDueDate`,
		`monStartTime`,
		`tueStartTime`,
		`wedStartTime`,
		`thuStartTime`,
		`friStartTime`,
		`createdAt`,
		`updatedAt`
		FROM
		`class`
		ORDER
		BY
		`courseCode`
	</select>

	<select id="selectCombinedListByEmail" parameterType="string"
		resultType="com.univ.course.model.ClassCourseCombined">
		SELECT
		a.`id`,
		a.`profEmail`,
		a.`maxNum`,
		a.`registerDueDate`,
		a.`monStartTime`,
		a.`tueStartTime`,
		a.`wedStartTime`,
		a.`thuStartTime`,
		a.`friStartTime`,
		a.`createdAt`,
		a.`updatedAt`,
		b.`courseCode`,
		b.`courseName`,
		b.`description`,
		b.`price`,
		c.`email`,
		c.`firstName`,
		c.`lastName`,
		c.`gender`,
		c.`subject`
		FROM
		`class` as a
		LEFT
		JOIN
		`course`
		as
		b
		ON
		a.`courseCode` =
		b.`courseCode`
		LEFT JOIN
		`user` as c
		ON
		a.`profEmail` =
		c.`email`
		WHERE
		c.`email` = #{email}
	</select>

	<select id="selectClassListByEmail" parameterType="string"
		resultType="com.univ.course.model.Class">
		SELECT
		`id`,
		`courseCode`,
		`profEmail`,
		`maxNum`,
		`registerDueDate`,
		`monStartTime`,
		`tueStartTime`,
		`wedStartTime`,
		`thuStartTime`,
		`friStartTime`,
		`createdAt`,
		`updatedAt`
		FROM
		`class`
		WHERE
		`profEmail` =
		#{email}
		ORDER BY `createdAt` DESC;
	</select>

	<select id="selectClassByClassId" parameterType="int"
		resultType="com.univ.course.model.Class">
		SELECT
		`id`,
		`courseCode`,
		`profEmail`,
		`maxNum`,
		`registerDueDate`,
		`monStartTime`,
		`tueStartTime`,
		`wedStartTime`,
		`thuStartTime`,
		`friStartTime`,
		`createdAt`,
		`updatedAt`
		FROM
		`class`
		WHERE
		`id` = #{classId}
	</select>

	<delete id="deleteClass" parameterType="int">
		DELETE
		FROM
		`class`
		WHERE
		`id` = #{classId}
	</delete>

	<select id="countFilteredCourseList" parameterType="map"
		resultType="int">
		SELECT
		COUNT(*) as `cnt`
		FROM
		`class` as a
		LEFT
		JOIN
		`course`
		as
		b
		ON
		a.`courseCode` =
		b.`courseCode`
		LEFT JOIN
		`user` as c
		ON
		a.`profEmail` =
		c.`email`
		WHERE
		(b.`courseCode`
		LIKE
		CONCAT('%',#{searchKeyword},'%')
		OR
		b.`courseName`
		LIKE
		CONCAT('%',#{searchKeyword},'%'))
		<choose>
			<when test="courseName != null">AND b.`courseCode` = #{courseName}</when>
			<when test="courseLevel != null">AND b.`courseCode` LIKE
				CONCAT(#{subjectCode},#{courseLevel},'%')</when>
			<when test="courseLevel == null and subjectCode != null">AND b.`courseCode` LIKE CONCAT(#{subjectCode},'%')
			</when>
		</choose>
		ORDER BY b.`courseCode`,a.`id`
	</select>

	<select id="selectClassCourseByClassId" parameterType="map"
		resultType="com.univ.course.model.ClassCourseCombined">
		SELECT
		a.`courseCode`,
		a.`courseName`,
		a.`description`,
		a.`price`,
		b.`id`,
		b.`profEmail`,
		b.`maxNum`,
		b.`registerDueDate`,
		b.`monStartTime`,
		b.`tueStartTime`,
		b.`wedStartTime`,
		b.`thuStartTime`,
		b.`friStartTime`,
		b.`createdAt`,
		b.`updatedAt`,
		c.`email`,
		c.`studentNum`,
		c.`firstName`,
		c.`lastName`,
		c.`gender`,
		c.`subject`,
		d.`averageGrade`
		FROM
		`course` as a
		LEFT
		JOIN
		`class`
		as
		b
		ON
		a.`courseCode` =
		b.`courseCode`
		LEFT JOIN
		`user` as c
		ON
		b.`profEmail` =
		c.`email`,
		(select
		avg(`perScore`)
		as `averageGrade`
		from
		`submittedassignment`
		WHERE
		`classId` =
		#{classId}
		AND `studentNum` =
		#{studentNum}) as d
		WHERE
		b.`id`
		=
		#{classId}
	</select>
</mapper>